(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{412:function(t,s,a){"use strict";a.r(s);var e=a(27),n=Object(e.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"《深入浅出-rxjs》笔记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#《深入浅出-rxjs》笔记","aria-hidden":"true"}},[t._v("#")]),t._v(" 《深入浅出 RxJS》笔记")]),t._v(" "),a("blockquote",[a("p",[t._v("RxJS 兼具函数式和反应式编程特点，擅长处理异步操作，因为它对数据采用 “推” 的处理方式，当一个数据产生的时候，会被推送给对应的处理函数，这个函数不用关心数据是同步产生还是异步产生的。")])]),t._v(" "),a("h2",{attrs:{id:"函数反应式编程-frp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数反应式编程-frp","aria-hidden":"true"}},[t._v("#")]),t._v(" 函数反应式编程 FRP")]),t._v(" "),a("ul",[a("li",[t._v("问题\n"),a("ul",[a("li",[t._v("如何控制大量代码的复杂度")]),t._v(" "),a("li",[t._v("如何保持代码的可读性/可维护性")]),t._v(" "),a("li",[t._v("如何处理异步操作")])])]),t._v(" "),a("li",[t._v("函数式编程特征\n"),a("ul",[a("li",[t._v("声明式（对应命令式）\n"),a("ul",[a("li",[t._v("不直接操作数据，以传递函数类型的参数来封装功能（只需表达想要做什么，而不是怎么去做）")])])]),t._v(" "),a("li",[t._v("纯函数\n"),a("ul",[a("li",[t._v("函数的执行结果完全由输入参数决定，不会受除参数之外的任何数据影响")]),t._v(" "),a("li",[t._v("函数内不会修改任何外部状态（如引用类型的参数属性）")])])]),t._v(" "),a("li",[t._v("数据不可变性\n"),a("ul",[a("li",[t._v("不要去修改现有数据，而是产生一个新的数据来体现 “程序的功能”")])])])])]),t._v(" "),a("li",[t._v("反应式编程\n"),a("ul",[a("li",[t._v("Rx 是一套通过监听流（程序的输入可以看成是一个数据流）来做异步编程的 API")]),t._v(" "),a("li",[t._v("Rx 诞生的主要目的是解决异步问题，而实际上使用 RxJS 通常不需要关心自己是被同步执行还是异步执行\n"),a("ul",[a("li",[t._v("数据流抽象了很多现实问题")]),t._v(" "),a("li",[t._v("擅长处理异步操作")]),t._v(" "),a("li",[t._v("把复杂问题分解成简单的问题组合\n"),a("ul",[a("li",[t._v("实现某个小功能的函数就是操作符")]),t._v(" "),a("li",[t._v("RxJS 就是学习如何组合操作符来解决复杂问题")])])])])])])])]),t._v(" "),a("h2",{attrs:{id:"rxjs-基础知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rxjs-基础知识","aria-hidden":"true"}},[t._v("#")]),t._v(" RxJS 基础知识")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("tree-shaking")]),t._v(" 可以处理 "),a("code",[t._v("import")]),t._v(" 方式的导入，最好是用一个文件专门导入 RxJS 相关功能，然后再在入口导入这个文件")])]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("Observable")]),t._v(" 是可被观察者（数据流），"),a("code",[t._v("Observer")]),t._v(" 是观察者")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("代表 “流” 的变量标识符都以 $ 符号结尾（芬兰式命名法）")]),t._v(" "),a("ul",[a("li",[t._v("数据流相对于数组有个好处，就是如果有个永无止境的数据流，内存不会无限增加")])])]),t._v(" "),a("li",[a("p",[t._v("连接两者的桥梁就是 "),a("code",[t._v("Observable")]),t._v(" 对象的函数 "),a("code",[t._v("subscribe")]),t._v("，而 "),a("code",[t._v("Observer")]),t._v(" 作为这个函数的参数")]),t._v(" "),a("ul",[a("li",[t._v("如何产生事件 -> "),a("code",[t._v("Observable")]),t._v(" -> 发布者")]),t._v(" "),a("li",[t._v("如何响应事件 -> "),a("code",[t._v("Observer")]),t._v(" -> 观察者")]),t._v(" "),a("li",[t._v("什么样的发布者关联什么样的观察者 -> 何时调用 "),a("code",[t._v("subscribe")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Observable "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 'rxjs"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Observable\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onSubscribe")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("observer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  observer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把数据 “推给” observer")]),t._v("\n  observer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  observer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// observer.error('err') // 通知出错 -> 弹珠图表示符号 X")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// observer.complete() // 通知完结 -> 弹珠图表示符号 |")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以上终结状态 error complete 只要其中一个被调用，后面的都不会执行了")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 退订时")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("unsubscribe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 清除定时器之类的。。。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" source$ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Observable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("onSubscribe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里并不是直接传给 onSubscribe，而是被包装过的")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" observer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只有 next 是必须")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("complete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// subscribe 参数是观察者，可以用对象形式")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 也可以用多参形式：(nextFn, errorFn, completeFn)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只有 subscribe 被调用时，onSubscribe 才执行，observer 才响应")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" subscription "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" source$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("observer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 观察者退订 - 终端 observer 与 source$ 的连接")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -> observer 不会再响应了，但 source$ 还有可能继续发射")]),t._v("\nsubscription"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unsubscribe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])])]),t._v(" "),a("li",[a("p",[t._v("Hot Cold Observable")]),t._v(" "),a("ul",[a("li",[t._v("有多个观察者在不同时间订阅的情况下，是否响应之前时间产生的数据")]),t._v(" "),a("li",[t._v("Cold -> “点播” 每次 "),a("code",[t._v("subscribe")]),t._v(" 都产生一个心的生产者")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" clod "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Observable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("observer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" producer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Producer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 产生新的生产者 - 新启动 - 冷 -_-")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[t._v("Hot -> “直播”")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" producer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Producer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生产者 - 已启动 - 热")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" clod "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Observable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("observer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("操作符：对数据流进行创建/处理/转化（静态方法、实例方法）的函数")])])]),t._v(" "),a("h2",{attrs:{id:"操作符基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作符基础","aria-hidden":"true"}},[t._v("#")]),t._v(" 操作符基础")]),t._v(" "),a("blockquote",[a("p",[t._v("返回一个 Observable 对象、对上游和下游的订阅及退订处理、处理异常境况、及时释放资源")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("（按输入）返回一个 Observable 对象的函数")]),t._v(" "),a("ol",[a("li",[t._v("根据其他 Observable 对象产生 -> 实例\n"),a("blockquote",[a("p",[a("code",[t._v("import 'rxjs/add/operators/map'")])])])]),t._v(" "),a("li",[t._v("利用其他类型的输入产生 -> 静态\n"),a("blockquote",[a("p",[a("code",[t._v("import 'rxjs/add/observable/of'")])])])]),t._v(" "),a("li",[t._v("不需要输入可以凭空产生 -> 静态\n"),a("blockquote",[a("p",[a("code",[t._v("Observable.create(...)")])])])]),t._v(" "),a("li",[t._v("静态操作符只能出现在链式调用的首位，有些操作符既有静态类也有实例类")])])]),t._v(" "),a("li",[a("p",[t._v("pipeable 操作符 通过 pipe 串接，有利于 tree shaking")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 'rxjs"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("add"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("observable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 'rxjs"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("add"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("operators"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" source$ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res$ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" source$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pipe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"创建数据流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建数据流","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建数据流")]),t._v(" "),a("blockquote",[a("p",[t._v("不依赖其他 Observable 对象产生 Observable")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("功能需求")]),t._v(" "),a("th",[t._v("适用的操作符")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("直接操作"),a("strong",[t._v("观察者")])]),t._v(" "),a("td",[t._v("create(observer => {...})")])]),t._v(" "),a("tr",[a("td",[t._v("根据有限的数据产生"),a("strong",[t._v("同步数据流")])]),t._v(" "),a("td",[t._v("of(1, 2, 3)")])]),t._v(" "),a("tr",[a("td",[t._v("产生一个数值范围内的数据")]),t._v(" "),a("td",[t._v("range(1, 100)")])]),t._v(" "),a("tr",[a("td",[t._v("以循环方是产生数据")]),t._v(" "),a("td",[t._v("generate")])]),t._v(" "),a("tr",[a("td",[t._v("重复产生数据流中的数据")]),t._v(" "),a("td",[t._v("repeat 和 repeatWhen")])]),t._v(" "),a("tr",[a("td",[t._v("产生空数据流")]),t._v(" "),a("td",[t._v("empty -> 直接产生一个完结（complete）的 Observable 对象")])]),t._v(" "),a("tr",[a("td",[t._v("产生直接出错的数据流")]),t._v(" "),a("td",[t._v("throw -> 直接 error")])]),t._v(" "),a("tr",[a("td",[t._v("产生永不完结的数据流")]),t._v(" "),a("td",[t._v("never -> 永不 complete 或 error")])]),t._v(" "),a("tr",[a("td",[t._v("间隔给定时间持续产生")]),t._v(" "),a("td",[t._v("interval 和 time")])]),t._v(" "),a("tr",[a("td",[t._v("从数组等"),a("strong",[t._v("枚举")]),t._v("类型数据产生数据流")]),t._v(" "),a("td",[t._v("from(数组、字符串、generator、arguments)")])]),t._v(" "),a("tr",[a("td",[t._v("从 Promise 对象产生数据流")]),t._v(" "),a("td",[t._v("fromPromise")])]),t._v(" "),a("tr",[a("td",[t._v("从外部事件对象产生数据流")]),t._v(" "),a("td",[t._v("fromEvent 和 fromEventPattern")])]),t._v(" "),a("tr",[a("td",[t._v("从 ajax 请求结果产生数据流")]),t._v(" "),a("td",[t._v("ajax")])]),t._v(" "),a("tr",[a("td",[t._v("延迟产生数据流")]),t._v(" "),a("td",[t._v("defer() 参数是")])])])]),t._v(" "),a("h3",{attrs:{id:"创建同步数据流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建同步数据流","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建同步数据流")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("generate -> 类似 for 循环")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ---- 对照 ----")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res$ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Observable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("generate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// let i = 0")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("i")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("i")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("i")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" i\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("repeat(2)")]),t._v(" -> 上游 "),a("code",[t._v("complete")]),t._v(" 之后再重复 -> 被订阅 2 次，也被退订 2 次")])])]),t._v(" "),a("h3",{attrs:{id:"创建异步数据流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建异步数据流","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建异步数据流")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("interval(1000) -> setInterval -> . 0 . 1 . 2 ...")])]),t._v(" "),a("li",[a("p",[t._v("time(1000) -> setTimeout -> . 0")]),t._v(" "),a("ul",[a("li",[t._v("time 第二个参数作用同 interval 所以 time 是 interval 超集")])])]),t._v(" "),a("li",[a("p",[t._v("fromEvent")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" evt$ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fromEvent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'click/mousemove'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 也可以是自定义 event 和 action")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("fromEventPattern(addHandler, removeHandler)")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("addHandler")]),t._v(", "),a("code",[t._v("removeHandler")]),t._v(" 函数表示添加、移除事件的动作（无需传入事件对象）")]),t._v(" "),a("li",[t._v("当 Observable 对象调用 subscribe 时 "),a("code",[t._v("addHandler")]),t._v(" 被调用")]),t._v(" "),a("li",[t._v("Observable 调用 subscribe 的返回值再调用 unsubscribe 时 "),a("code",[t._v("removeHandler")]),t._v(" 被调用")])])]),t._v(" "),a("li",[a("p",[t._v("repeatWhen 相对于 repeat 来说还可以控制再次订阅的时间")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("notifier")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("notification$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" notification$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("defer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 上游完结后 1s 之后再重新订阅")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// return 一个 Observable 通知重新订阅")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" repeated$ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" source$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("repeateWhen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("notifier"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("defer 延迟产生 Observable")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("observableFa")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" Observable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ajax")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ajaxUrl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" source$ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Observable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("defer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("observableFa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只有在 source$ 被订阅时 observableFa 才会被调用")]),t._v("\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"合并数据流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并数据流","aria-hidden":"true"}},[t._v("#")]),t._v(" 合并数据流")]),t._v(" "),a("blockquote",[a("p",[t._v("把多个 Observable 对象合并到 一个 Observable 中")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("功能需求")]),t._v(" "),a("th",[t._v("适用的操作符")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("把多个数据流以"),a("strong",[t._v("首尾相连")]),t._v("的方式合并")]),t._v(" "),a("td",[t._v("concat 和 concatAll")])]),t._v(" "),a("tr",[a("td",[t._v("把多个数据流以"),a("strong",[t._v("先到先得")]),t._v("的方式合并")]),t._v(" "),a("td",[t._v("merge 和 mergeAll")])]),t._v(" "),a("tr",[a("td",[t._v("把多个数据流以"),a("strong",[t._v("一对一")]),t._v("的方式合并")]),t._v(" "),a("td",[t._v("zip 和 zipAll")])]),t._v(" "),a("tr",[a("td",[t._v("持续合并多个数据流中"),a("strong",[t._v("最新产生")]),t._v("的数据")]),t._v(" "),a("td",[t._v("combineLatest combineAll withLatestFrom")])]),t._v(" "),a("tr",[a("td",[t._v("从多个数据流中选取"),a("strong",[t._v("第一个产生内容")]),t._v("的数据流")]),t._v(" "),a("td",[t._v("race")])]),t._v(" "),a("tr",[a("td",[t._v("在数据流"),a("strong",[t._v("前面添加一个")]),t._v("指定数据")]),t._v(" "),a("td",[t._v("startWith")])]),t._v(" "),a("tr",[a("td",[t._v("只获取多个数据流"),a("strong",[t._v("最后产生")]),t._v("的那个数据")]),t._v(" "),a("td",[t._v("forkJoin")])]),t._v(" "),a("tr",[a("td",[t._v("从高阶数据流中切换数据源")]),t._v(" "),a("td",[t._v("switch exhaust")])])])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("concat")]),t._v(" 从 source1$ 中获取数据并传给下游，当 source1$ complete 之后，就会调用 source1$.unsubscribe 然后调用 source2$.subscribe 继续从 source2$ 获取数据并传给下游")]),t._v(" "),a("li",[a("code",[t._v("merge")]),t._v(" 会第一时间订阅所有上游 Observable 任何一个上游 Observable 有数据了就立刻传给下游，所有上游都 complete 时，下游 Observable 才会 complete\n"),a("blockquote",[a("p",[t._v("避免使用 merge 去合并同步数据流，因为上游同步数据是一下子全传给下游的，和 concat 差不多了")])])]),t._v(" "),a("li",[a("code",[t._v("zip")]),t._v(" 把上游的数据转化为数组形式传给下游，每个上游 Observable 产生的数据，都会在对应的数组中有一席之地。只要任意一个上游 complete 且这个 Observable 最后产生的数据也配对之后就把这最后一个数组传给下游同时下游 Observable 也 complete")]),t._v(" "),a("li",[a("code",[t._v("combineLatest")]),t._v(" 合并上游产生的最新的数据，从所有上游都有数据产生开始，只要任意一个上游的发出新的数据，都会合并一次传给下游。所有上游都完结之后（不会再有新发出数据）时，下游也就完结了\n"),a("ul",[a("li",[t._v('combineLatest 的第二个参数是函数，用于"定义合并"这个操作，可以不必传数组给下游')])])]),t._v(" "),a("li",[a("code",[t._v("withLatestFrom")]),t._v(" 与 combineLatest 不同的是它给下游推送数据只能由一个上游 Observable 驱动（主导产生数据的节奏）只有这个上游更新才会产生一次合并推送\n"),a("blockquote",[a("p",[t._v("这个没有静态操作符，因为它需要一个做主导")])])]),t._v(" "),a("li",[a("code",[t._v("race")]),t._v(" 多个上游 Observable 一起，看谁最先产生数据，就完全采用这个的数据推送给下游，其他的会被退订")]),t._v(" "),a("li",[a("code",[t._v("forkJoin")]),t._v(" 所有上游完结时，合并最后的数据产生唯一一个数据推送给下游")]),t._v(" "),a("li",[t._v("高阶 Observable\n"),a("ul",[a("li",[t._v("产生的数据依然是 Observable 的 Observable 对象 -> 高阶 Observable 完结了并不代表内部 Observable 对象 完结")]),t._v(" "),a("li",[t._v("concatAll mergeAll zipAll combineAll\n"),a("ul",[a("li",[t._v("All 代表全部，把一个高阶 Observable 的所有内部 Observable 都组合起来")]),t._v(" "),a("li",[t._v("没有任何参数，所有的输入都来自上游的 Observable 对象")])])]),t._v(" "),a("li",[a("code",[t._v("switch")]),t._v(" 总是切换到最新的内部 Observable 对象上获取数据\n"),a("ul",[a("li",[t._v("每当上游高阶 Observable 对象内部产生新的 Observable 就立即订阅新的，退订掉旧的")]),t._v(" "),a("li",[t._v("完结条件：上游高阶 Observable 完结 + 当前内部 Observable 完结")])])]),t._v(" "),a("li",[a("code",[t._v("exhaust")]),t._v(" 只有耗尽当前内部 Observable 后，才"),a("strong",[t._v("有空")]),t._v("订阅下一个新产生的内部 Observable")])])])]),t._v(" "),a("h2",{attrs:{id:"辅助类操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#辅助类操作符","aria-hidden":"true"}},[t._v("#")]),t._v(" 辅助类操作符")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("功能需求")]),t._v(" "),a("th",[t._v("适用的操作符")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("统计数据流中产生的所有数据个数")]),t._v(" "),a("td",[t._v("count")])]),t._v(" "),a("tr",[a("td",[t._v("获取数据流中最大或最小的数据")]),t._v(" "),a("td",[t._v("max min")])]),t._v(" "),a("tr",[a("td",[t._v("对数据流中所有数据做规约操作")]),t._v(" "),a("td",[t._v("Reduce")])]),t._v(" "),a("tr",[a("td",[t._v("判断是否所有数据满足某个判定条件")]),t._v(" "),a("td",[t._v("every")])]),t._v(" "),a("tr",[a("td",[t._v("找到第一个满足判定条件的数据")]),t._v(" "),a("td",[t._v("find findIndex")])]),t._v(" "),a("tr",[a("td",[t._v("判断一个数据流是否不包含任何数据")]),t._v(" "),a("td",[t._v("isEmpty")])]),t._v(" "),a("tr",[a("td",[t._v("如果一个数据流为空就默认产生一个指定的数据")]),t._v(" "),a("td",[t._v("defaultIfEmpty")])])])]),t._v(" "),a("h2",{attrs:{id:"过滤数据流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过滤数据流","aria-hidden":"true"}},[t._v("#")]),t._v(" 过滤数据流")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("功能需求")]),t._v(" "),a("th",[t._v("适用操作符")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("过滤掉不满足判定条件的操作符")]),t._v(" "),a("td",[t._v("filter")])]),t._v(" "),a("tr",[a("td",[t._v("获得满足判定条件的"),a("strong",[t._v("第一个")]),t._v("数据")]),t._v(" "),a("td",[t._v("first")])]),t._v(" "),a("tr",[a("td",[t._v("获得满足判定条件的"),a("strong",[t._v("最后一个")]),t._v("数据")]),t._v(" "),a("td",[t._v("last")])]),t._v(" "),a("tr",[a("td",[t._v("从数据流中选取"),a("strong",[t._v("最先出现的")]),t._v("若干个数据")]),t._v(" "),a("td",[t._v("take")])]),t._v(" "),a("tr",[a("td",[t._v("从数据流中选取"),a("strong",[t._v("最后出现的")]),t._v("若干个数据")]),t._v(" "),a("td",[t._v("takeLast")])]),t._v(" "),a("tr",[a("td",[t._v("从数据流中选取数据"),a("strong",[t._v("直到某种情况")]),t._v("发生")]),t._v(" "),a("td",[t._v("takeWhile takeUntil")])]),t._v(" "),a("tr",[a("td",[t._v("从数据流中"),a("strong",[t._v("忽略最先出现的")]),t._v("若干个数据")]),t._v(" "),a("td",[t._v("skip")])]),t._v(" "),a("tr",[a("td",[t._v("从数据流中"),a("strong",[t._v("忽略数据直到")]),t._v("某种情况发生")]),t._v(" "),a("td",[t._v("skipWhile 和 skipUntil")])]),t._v(" "),a("tr",[a("td",[t._v("基于数据内容的数据流筛选")]),t._v(" "),a("td",[t._v("throttle debounce audit")])]),t._v(" "),a("tr",[a("td",[t._v("基于时间的数据流筛选")]),t._v(" "),a("td",[t._v("throttleTime debounceTime auditTime")])]),t._v(" "),a("tr",[a("td",[t._v("基于采样方式的数据流筛选")]),t._v(" "),a("td",[t._v("sample sampleTime")])]),t._v(" "),a("tr",[a("td",[t._v("删除重复的数据")]),t._v(" "),a("td",[t._v("distnct")])]),t._v(" "),a("tr",[a("td",[t._v("删除重复的连续数据")]),t._v(" "),a("td",[t._v("distnctUntilChanged distnctUntilKeyChanged")])]),t._v(" "),a("tr",[a("td",[t._v("忽略数据流中的所有数据（只关心 error 和 complete）")]),t._v(" "),a("td",[t._v("ignoreElements")])]),t._v(" "),a("tr",[a("td",[t._v("只选取指定出现位置的数据")]),t._v(" "),a("td",[t._v("elementAt")])]),t._v(" "),a("tr",[a("td",[t._v("判断是否只有一个数据满足条件")]),t._v(" "),a("td",[t._v("single")])])])]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("first")]),t._v(" 与 find findIndex 的区别")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'rxjs/add/observable/of'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'rxjs/add/operator/first'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" source$ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Observable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("of")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nsource$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("first")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可选, 定义输出结果（数组）")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可选")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第二个参数可选，用于定制最终吐出的数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果没有满足条件的，将会抛出 error。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 但是可以传递三个参数，表示没有结果时输出的值 -1")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("takeLast")]),t._v(" 与 take 的差别：takeLast 只有在上游数据完结时，才能产生数据（才知道哪 n 个最后 n 个），而且时一次性传给下游（不会有时间间隔）")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("takeUntil")]),t._v(" 特点：上游的数据直接转手给下游，直到参数 notifier（是一个 Observable）吐出一个数据或者完结（-_- 它只要一有动静，takeUntil 就完结。。。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("takeWhile")]),t._v(" "),a("code",[t._v("skipWhile")]),t._v(" 的参数时一个返回 boollen 的判定函数")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("throttleTime")]),t._v(" "),a("strong",[t._v("限制")]),t._v("在 duration 时间范围内，从上游传递给下游的数据的"),a("strong",[t._v("个数")]),t._v("（1 个）")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("debounceTime")]),t._v(" "),a("strong",[t._v("让")]),t._v("传递给下游的数据"),a("strong",[t._v("间隔")]),t._v("不能小于给定的时间 duetime")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("throttle")]),t._v(" "),a("code",[t._v("debounce")]),t._v(" 与上面的操作符的区别是，不是用时间来控制流量，而是用 Observable 中的数据来控制流量")]),t._v(" "),a("ul",[a("li",[t._v("参数是一个返回 Observable 的函数，可以理解成当 Observable 为固定时间吐数据时，与 throttleTime debounceTime 效果一样")]),t._v(" "),a("li",[t._v("大部分场景 throttleTime debounceTime 足够，只有当固定时间的回压控制不满足要求时，才用 throttle debounce")])])]),t._v(" "),a("li",[a("p",[t._v("auditTime 和 audit")]),t._v(" "),a("ul",[a("li",[t._v("auditTime 与 throttle 类似，区别是：auditTime 取时间段内的最后一个数据")])])]),t._v(" "),a("li",[a("p",[t._v("sampleTime 与 sample 不管上游产生的数据节奏怎样，完全根据自己参数指定的间隔节奏来给下游传递数据")])])]),t._v(" "),a("h2",{attrs:{id:"转化数据流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转化数据流","aria-hidden":"true"}},[t._v("#")]),t._v(" 转化数据流")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("功能需求")]),t._v(" "),a("th",[t._v("适用的操作符")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("将每个元素用映射函数产生新的数据")]),t._v(" "),a("td",[t._v("map")])]),t._v(" "),a("tr",[a("td",[t._v("将数据流中每个元素映射为同一个元素")]),t._v(" "),a("td",[t._v("mapTo")])]),t._v(" "),a("tr",[a("td",[t._v("提取数据流中每个数据的某个字段")]),t._v(" "),a("td",[t._v("pluck")])]),t._v(" "),a("tr",[a("td",[t._v("产生高阶 Observable 对象")]),t._v(" "),a("td",[t._v("windowTime windowCount windowWhen windowToggle window")])]),t._v(" "),a("tr",[a("td",[t._v("产生数组构成的数据流")]),t._v(" "),a("td",[t._v("bufferTime bufferCount bufferWhen bufferToggle buffer")])]),t._v(" "),a("tr",[a("td",[t._v("映射产生高阶 Observable 对象然后合并")]),t._v(" "),a("td",[t._v("concatMap mergeMap switchMap exhaustMap")])]),t._v(" "),a("tr",[a("td",[t._v("产生规约运算的结果组成的数据流")]),t._v(" "),a("td",[t._v("scan mergeScan")])])])]),t._v(" "),a("ul",[a("li",[t._v("无损回压控制：把上游在一段时间内产生的数据放到一个数据集合（数组、Observable）里，然后把这个数据集合一次丢给下游。支持数组的以 "),a("code",[t._v("buffer")]),t._v(" 开头，支持 "),a("code",[t._v("Observable")]),t._v(" 的以 window 开头\n"),a("ul",[a("li",[t._v("windowTime 和 bufferTime 每间隔固定时间段来收集")]),t._v(" "),a("li",[t._v("windowCount 和 bufferCount 每收集固定个数")]),t._v(" "),a("li",[t._v("windowWhen 和 bufferWhen 参数是一个返回 Observable 的函数，Observable 的一次产生数据~完成被认为是一个“缓冲区块”")]),t._v(" "),a("li",[t._v("windowToggle 和 bufferToggle 接收 2 个参数，第一个参数 opening$ 产生一个数据代表缓冲窗口（区块）的开始，同时第二个参数 "),a("code",[t._v("closingSelector")]),t._v(" 被调用，用来获取缓冲窗口的结束\n"),a("blockquote",[a("p",[t._v("closingSelector 是指一个返回 Observable 的函数（它的参数是 opening$ 产生的数据）")])])]),t._v(" "),a("li",[t._v("window 和 buffer 的参数只是一个 notifer$ （吐出数据的节奏）分隔上游数据序列")])])]),t._v(" "),a("li",[t._v("高阶的 map\n"),a("ul",[a("li",[t._v("高阶 map 的参数（project 函数）把一个数据映射为一个 Observable 对象，而且把每个内部 Observable 的数据做组合（砸平）传给下游\n"),a("blockquote",[a("p",[t._v("project 函数 的参数（map 传下来的数据，序号）")])])]),t._v(" "),a("li",[t._v("concatMap = map + concatAll")]),t._v(" "),a("li",[t._v("mergeMap = map + mergeAll")]),t._v(" "),a("li",[t._v("switchMap = map + switch")]),t._v(" "),a("li",[t._v("exhoustMap = map + exhoust 先产生的 Observable 优先级更高（喜欢旧的数据）")])])]),t._v(" "),a("li",[t._v("数据分组 - 把一个数据流拆分成多个数据流\n"),a("ul",[a("li",[a("code",[t._v("groupBy")]),t._v(" 传递给下游的是一个高阶 "),a("code",[t._v("Observable")])]),t._v(" "),a("li",[a("code",[t._v("partition")]),t._v(" 返回一个数组（包含 2 个 "),a("code",[t._v("Observable")]),t._v("）-> 唯一一个不返回 Observable 的操作符")])])]),t._v(" "),a("li",[t._v("累计数据 规约操作\n"),a("ul",[a("li",[a("code",[t._v("scan")]),t._v(" 对上游每一个数据都会产生一个规约结果传递给下游，无需上游数据完结（与 reduce 的区别）")]),t._v(" "),a("li",[a("code",[t._v("mergeScan")]),t._v(" 区别是：规约函数返回的是一个 Observable 而不是一个数据（使用频率低）")])])])]),t._v(" "),a("h2",{attrs:{id:"异常错误处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常错误处理","aria-hidden":"true"}},[t._v("#")]),t._v(" 异常错误处理")]),t._v(" "),a("blockquote",[a("p",[t._v("对错误异常的处理可以分为 2 类：恢复（发生错误时依然让运算继续下去）、重试（重新尝试之前发生错误的操作）")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("功能需求")]),t._v(" "),a("th",[t._v("适用的操作符")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("捕获并处理上游产生的异常错误")]),t._v(" "),a("td",[t._v("catch")])]),t._v(" "),a("tr",[a("td",[t._v("当上游产生错误时进行重试")]),t._v(" "),a("td",[t._v("retry retryWhen")])]),t._v(" "),a("tr",[a("td",[t._v("无论是否出错都要进行一些操作（上游完结 or 出错时发挥一次作用）")]),t._v(" "),a("td",[t._v("finally")])])])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("catch")]),t._v(" “恢复”")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// err: 错误对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// caught$ 代表上游 Observable 对象（直接返回 caught$ 可以模拟重试的效果）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回的 observable 吐出的数据会替代发生错误的那一个数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" catch$ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" error$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" caught$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" Observable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("of")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("retry")]),t._v(' "重试"（本质是重新订阅一次上游的 Observable，在订阅的同时取消上一次订阅，对于 Hot 数据流其实并不是真的 “重试”，只不过是重新订阅而已）')]),t._v(" "),a("li",[a("code",[t._v("retryWhen")]),t._v(" 参数是一个返回 OBservable 的函数（notice$ 节奏控制器）")])]),t._v(" "),a("h2",{attrs:{id:"多播"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多播","aria-hidden":"true"}},[t._v("#")]),t._v(" 多播")]),t._v(" "),a("blockquote",[a("p",[t._v("让一个数据流的内容被多个 Observer 订阅\n"),a("code",[t._v("Subject")]),t._v(" "),a("code",[t._v("BehaviorSubject")]),t._v(" "),a("code",[t._v("ReplaySubject")]),t._v(" "),a("code",[t._v("AsyncSubject")]),t._v(" 类型")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("功能需求")]),t._v(" "),a("th",[t._v("适用的操作符")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("灵活选取 Subject 对象进行多播")]),t._v(" "),a("td",[t._v("multicast share publish")])]),t._v(" "),a("tr",[a("td",[t._v("只多播数据流中最后一个数据")]),t._v(" "),a("td",[t._v("publishLast")])]),t._v(" "),a("tr",[a("td",[t._v("对数据流中给定数量的数据进行多播")]),t._v(" "),a("td",[t._v("publishReplay")])]),t._v(" "),a("tr",[a("td",[t._v("拥有默认数据的多播")]),t._v(" "),a("td",[t._v("publishBehavior")])])])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Hot Clod 数据流")]),t._v(" "),a("ul",[a("li",[t._v("Hot 操作符的数据源来自外部，实现的是 "),a("strong",[t._v("多播")])]),t._v(" "),a("li",[t._v("Clod 实现的是单播（每次订阅都是重新发数据）")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Subject")]),t._v(" 包装 Clod 产生一个新的 Hot")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Subject 实例")]),t._v("命名通常不以 $ 结尾")]),t._v(" "),a("li",[t._v("Subject 兼具 Observable 和 Observer 的性质 -> 实现多播效果")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Subject "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'rxjs/Subject'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" sub1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Subject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sub1.subscribe(...) // 接受订阅")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sub1.next(1) 发数据 -> 所以它调用 error complete 之后作为 Observable 的生命周期也就结束了")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" sub2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Subject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nsource$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("subcribe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sub2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// source2$.subcribe(sub2) -> 它可以有多个上游来发数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sub2.subscribe(...)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sub2.subscribe(...) // 使 source$ 多播效果")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("multicast")]),t._v(" （比较基础的操作符")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// multicast 参数还可以是一个返回 Subject（中间人）的函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -> 当有人订阅但中间人已经退订时，产生一个新的中间人")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hotSource$ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" coldSource$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("multicast")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Subject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hotSource$.connect() 开始播")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 或者 hotSource$ = hotSource$.refCount() 根据下游 Observer 的个数来决定对上游的连接")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("publish")]),t._v(" 是通过 "),a("code",[t._v("multicast")]),t._v(" 来实现的")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// publish -> multicast(new Subject())")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hotSource$ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" coldSource$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("publish")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("refCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("share")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// share -> multicast(() => new Subject()).refCount()")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hotSource$ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" coldSource$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("share")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("publishLast")]),t._v(" 和 "),a("code",[t._v("AsyncSubject")]),t._v(" "),a("ul",[a("li",[t._v("当上游 Cold 完结的时候，才把最后一个数据传给 Observer")])])]),t._v(" "),a("li",[a("code",[t._v("publishReplay")]),t._v(" 和 "),a("code",[t._v("ReplaySubject")]),t._v(" TODO:")]),t._v(" "),a("li",[a("code",[t._v("publishBehavior")]),t._v(" 和 "),a("code",[t._v("BehaviorSubject")]),t._v(" TODO:")])]),t._v(" "),a("h2",{attrs:{id:"掌握时间的-scheduler"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#掌握时间的-scheduler","aria-hidden":"true"}},[t._v("#")]),t._v(" 掌握时间的 Scheduler")]),t._v(" "),a("h2",{attrs:{id:"rxjs-调试和测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rxjs-调试和测试","aria-hidden":"true"}},[t._v("#")]),t._v(" RxJS 调试和测试")])])},[],!1,null,null,null);s.default=n.exports}}]);